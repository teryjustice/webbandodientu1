// L·∫•y gi·ªè h√†ng t·ª´ backend qua API
async function getCart() {
  const user = JSON.parse(localStorage.getItem('user'));
  const userId = user && user._id; // Ch·ªâ l·∫•y _id cho ƒë·ªìng nh·∫•t
  if (!userId) return [];

  try {
    const res = await axios.get(`http://localhost:5000/api/cart/${userId}`);
    return res.data || [];
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y gi·ªè h√†ng:', err);
    return [];
  }
}

// Hi·ªÉn th·ªã gi·ªè h√†ng
async function displayCart() {
  const cartItems = document.getElementById('cart-items');
  const cartEmpty = document.getElementById('cart-empty');
  const cartDetails = document.getElementById('cart-details');
  const cart = await getCart();

  if (!cart || cart.length === 0) {
    cartEmpty.style.display = 'block';
    cartDetails.style.display = 'none';
    return;
  }

  cartEmpty.style.display = 'none';
  cartDetails.style.display = 'block';
  cartItems.innerHTML = '';

  cart.forEach(item => {
    const product = item.productId;
    if (!product) {
      console.warn('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin:', item);
      // N·∫øu productId b·ªã null, t·ª± ƒë·ªông xo√° kh·ªèi gi·ªè h√†ng
      if (item._id) removeItemByCartItemId(item._id);
      return; // B·ªè qua item l·ªói
    }
    const quantity = item.quantity;
    const price = product.price;

    const cartItem = document.createElement('div');
    cartItem.className = 'cart-item';
    cartItem.innerHTML = `
      <img src="${product.image || 'http://localhost:5000/images/default.jpg'}" alt="${product.name}">
      <div class="cart-item-info">
        <h4>${product.name}</h4>
        <p>Gi√°: ${price.toLocaleString('vi-VN')}ƒë</p>
        <div class="cart-item-quantity">
          <button class="quantity-btn" onclick="updateQuantity('${product._id}', ${quantity - 1})">-</button>
          <span>${quantity}</span>
          <button class="quantity-btn" onclick="updateQuantity('${product._id}', ${quantity + 1})">+</button>
          <button class="remove-btn" onclick="removeItem('${product._id}')">Xo√°</button>
        </div>
      </div>
    `;
    cartItems.appendChild(cartItem);
  });

  updateTotal(cart);
}

// C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
function updateTotal(cart) {
  // L·ªçc ra c√°c item h·ª£p l·ªá c√≥ productId v√† productId.price
  const validItems = cart.filter(item => item.productId && typeof item.productId.price === 'number');
  const subtotal = validItems.reduce((sum, item) => sum + item.quantity * item.productId.price, 0);
  const shipping = subtotal > 0 ? 30000 : 0;
  const total = subtotal + shipping;

  document.getElementById('subtotal').textContent = `${subtotal.toLocaleString('vi-VN')}ƒë`;
  document.getElementById('shipping').textContent = `${shipping.toLocaleString('vi-VN')}ƒë`;
  document.getElementById('total').textContent = `${total.toLocaleString('vi-VN')}ƒë`;
}

// S·ª≠a s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
async function updateQuantity(productId, newQuantity) {
  if (newQuantity < 1) return;

  const user = JSON.parse(localStorage.getItem('user'));
  const userId = user && user._id;
  if (!userId) return;

  try {
    await axios.put(`http://localhost:5000/api/cart/update`, {
      userId,
      productId,
      quantity: newQuantity
    });
    displayCart();
  } catch (err) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', err);
  }
}

// Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè
async function removeItem(productId) {
  const user = JSON.parse(localStorage.getItem('user'));
  const userId = user && user._id;
  if (!userId) return;

  try {
    await axios.delete(`http://localhost:5000/api/cart/remove`, {
      data: { userId, productId }
    });
    displayCart();
  } catch (err) {
    console.error('‚ùå L·ªói xo√° s·∫£n ph·∫©m:', err);
  }
}

// Th√™m h√†m xo√° item theo _id c·ªßa cart item (d√πng cho tr∆∞·ªùng h·ª£p productId null)
async function removeItemByCartItemId(cartItemId) {
  const user = JSON.parse(localStorage.getItem('user'));
  const userId = user && user._id;
  if (!userId) return;

  try {
    await axios.delete(`http://localhost:5000/api/cart/remove-by-cartitemid`, {
      data: { userId, cartItemId }
    });
    displayCart();
  } catch (err) {
    console.error('‚ùå L·ªói xo√° s·∫£n ph·∫©m (cartItemId):', err);
  }
}

// G·ª≠i ƒë∆°n h√†ng
document.getElementById('checkout-form').addEventListener('submit', async function (e) {
  e.preventDefault();

  const cart = await getCart();
  if (!cart || cart.length === 0) return alert('Gi·ªè h√†ng tr·ªëng');

  const user = JSON.parse(localStorage.getItem('user'));
  const userId = user && user._id;
  if (!userId) return alert('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!');

  const order = {
    userId,
    fullname: document.getElementById('fullname').value,
    phone: document.getElementById('phone').value,
    address: document.getElementById('address').value,
    payment: document.getElementById('payment').value,
    items: cart.map(item => ({
      productId: item.productId._id,
      quantity: item.quantity
    })),
    total: cart.reduce((sum, item) => sum + item.quantity * item.productId.price, 0) + 30000
  };

  try {
    const res = await axios.post('http://localhost:5000/api/orders', order);
    if (res.data.success) {
      document.getElementById('success-message').textContent = 'üü¢ ƒê·∫∑t h√†ng th√†nh c√¥ng!';
      document.getElementById('success-message').style.display = 'block';
      this.reset();
      displayCart();

      setTimeout(() => {
        window.location.href = 'account.html';
      }, 3000);
    } else {
      alert('ƒê·∫∑t h√†ng th·∫•t b·∫°i, th·ª≠ l·∫°i sau!');
    }
  } catch (err) {
    console.error('‚ùå L·ªói ƒë·∫∑t h√†ng:', err);
    alert('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng.');
  }
});

// B·∫Øt ƒë·∫ßu
document.addEventListener('DOMContentLoaded', () => {
  displayCart();
});
