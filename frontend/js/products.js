let currentPage = 1;
const productsPerPage = 6;
let prevPageBtn, nextPageBtn;

document.addEventListener('DOMContentLoaded', () => {
  console.log("üü¢ DOM loaded, g·ªçi fetchProducts()");
  fetchProducts();

  const user = JSON.parse(localStorage.getItem('user'));
  const adminSection = document.getElementById('adminProductActions');
  if (user?.role === 'admin' && adminSection) {
    adminSection.style.display = 'block';
  }

  prevPageBtn = document.getElementById('prev-page');
  nextPageBtn = document.getElementById('next-page');

  if (prevPageBtn) {
    prevPageBtn.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        fetchProducts();
      }
    });
  }

  if (nextPageBtn) {
    nextPageBtn.addEventListener('click', () => {
      currentPage++;
      fetchProducts();
    });
  }

  const applyFilterBtn = document.getElementById('apply-filter');
  if (applyFilterBtn) {
    applyFilterBtn.addEventListener('click', (e) => {
      e.preventDefault();
      currentPage = 1;
      fetchProducts();
    });
  }

  // X·ª≠ l√Ω b·ªô l·ªçc s·∫£n ph·∫©m
  const filterForm = document.getElementById('filter-form');
  if (filterForm) {
    filterForm.addEventListener('submit', function(e) {
      e.preventDefault();
      currentPage = 1;
      fetchProducts();
    });
  }
});

async function fetchProducts() {
  console.log("üì¶ fetchProducts ƒë∆∞·ª£c g·ªçi");
  try {
    const category = document.getElementById('category')?.value || '';
    const priceRange = document.getElementById('price')?.value || '';
    const sort = document.getElementById('sort')?.value || '';

    const queryParams = new URLSearchParams();
    if (category) queryParams.append('category', category);
    if (priceRange === 'under_5m') {
      queryParams.append('minPrice', '0');
      queryParams.append('maxPrice', '5000000');
    } else if (priceRange === '5m_10m') {
      queryParams.append('minPrice', '5000000');
      queryParams.append('maxPrice', '10000000');
    } else if (priceRange === '10m_20m') {
      queryParams.append('minPrice', '10000000');
      queryParams.append('maxPrice', '20000000');
    } else if (priceRange === 'over_20m') {
      queryParams.append('minPrice', '20000000');
    }
    if (sort) queryParams.append('sort', sort);

    const response = await axios.get(`http://localhost:5000/api/products?${queryParams.toString()}`);
    const products = response.data;

    const start = (currentPage - 1) * productsPerPage;
    const paginated = products.slice(start, start + productsPerPage);

    const productContainer = document.getElementById('product-list');
    if (!productContainer) return;
    productContainer.innerHTML = '';

    paginated.forEach(product => {
      const card = document.createElement('div');
      card.classList.add('product-item');
      card.innerHTML = `
        <img src="${product.image && product.image.trim() !== '' ? product.image : 'http://localhost:5000/images/default.jpg'}" alt="${product.name}">
        <h4><a href="product-detail.html?id=${product._id}">${product.name}</a></h4>
        <p>${product.price.toLocaleString('vi-VN')} VNƒê</p>
        <button onclick="addToCart('${product._id}')">Th√™m v√†o gi·ªè</button>
      `;
      productContainer.appendChild(card);
    });

    const pageNumberElem = document.getElementById('page-number');
    if (pageNumberElem) pageNumberElem.textContent = currentPage;
    if (prevPageBtn) prevPageBtn.disabled = currentPage === 1;
    if (nextPageBtn) nextPageBtn.disabled = start + productsPerPage >= products.length;
  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫£i s·∫£n ph·∫©m:', err);
    const productContainer = document.getElementById('product-list');
    if (productContainer) {
      productContainer.innerHTML = '<p>L·ªói khi t·∫£i s·∫£n ph·∫©m</p>';
    }
  }
}

// Th√™m v√†o gi·ªè h√†ng
async function addToCart(productId) {
  const user = JSON.parse(localStorage.getItem('user'));
  // Ki·ªÉm tra userId h·ª£p l·ªá
  if (!user || !user._id || !/^\w{24}$/.test(user._id)) {
    alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!');
    return;
  }
  // Ki·ªÉm tra productId h·ª£p l·ªá
  if (!/^\w{24}$/.test(productId)) {
    alert('M√£ s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!');
    return;
  }
  try {
    const res = await axios.post('http://localhost:5000/api/cart/add', {
      userId: user._id,
      productId,
      quantity: 1
    });
    alert('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng');
  } catch (err) {
    // Hi·ªÉn th·ªã l·ªói chi ti·∫øt n·∫øu c√≥
    if (err.response && err.response.data && err.response.data.message) {
      alert('L·ªói: ' + err.response.data.message);
    } else {
      alert('Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng');
    }
    console.error('‚ùå L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng:', err?.response?.data || err);
  }
}

// Th√™m h√†m t√¨m ki·∫øm s·∫£n ph·∫©m
function searchProducts() {
  const searchInput = document.getElementById('searchInput');
  const keyword = searchInput ? searchInput.value.trim().toLowerCase() : '';
  if (!keyword) {
    fetchProducts(); // Hi·ªÉn th·ªã l·∫°i t·∫•t c·∫£ n·∫øu kh√¥ng nh·∫≠p g√¨
    return;
  }
  // Lu√¥n t√¨m theo t√™n s·∫£n ph·∫©m (kh√¥ng l·ªçc theo category n·ªØa)
  axios.get('http://localhost:5000/api/products')
    .then(res => {
      const products = res.data.filter(product =>
        product.name && product.name.toLowerCase().includes(keyword)
      );
      renderSearchedProducts(products);
    })
    .catch(err => {
      console.error('L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m:', err);
    });
}

// H√†m render k·∫øt qu·∫£ t√¨m ki·∫øm
function renderSearchedProducts(products) {
  const productContainer = document.getElementById('product-list');
  if (!productContainer) return;
  productContainer.innerHTML = '';
  if (products.length === 0) {
    productContainer.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.</p>';
    return;
  }
  const user = JSON.parse(localStorage.getItem('user'));
  products.forEach(product => {
    const card = document.createElement('div');
    card.classList.add('product-item');
    card.innerHTML = `
      <img src="${product.image && product.image.trim() !== '' ? product.image : 'http://localhost:5000/images/default.jpg'}" alt="${product.name}">
      <h4><a href="product-detail.html?id=${product._id}">${product.name}</a></h4>
      <p>${product.price.toLocaleString('vi-VN')} VNƒê</p>
      <button onclick="addToCart('${product._id}')">Th√™m v√†o gi·ªè</button>
      ${user && user.role === 'admin' ? `<button class="edit-btn" onclick="openEditProductModal('${product._id}')">S·ª≠a</button>` : ''}
    `;
    productContainer.appendChild(card);
  });
}

// Th√™m n√∫t s·ª≠a cho admin khi render s·∫£n ph·∫©m b√¨nh th∆∞·ªùng
function renderProductsWithEdit(products) {
  const productContainer = document.getElementById('product-list');
  if (!productContainer) return;
  productContainer.innerHTML = '';
  const user = JSON.parse(localStorage.getItem('user'));
  products.forEach(product => {
    const card = document.createElement('div');
    card.classList.add('product-item');
    card.innerHTML = `
      <img src="${product.image && product.image.trim() !== '' ? product.image : 'http://localhost:5000/images/default.jpg'}" alt="${product.name}">
      <h4><a href="product-detail.html?id=${product._id}">${product.name}</a></h4>
      <p>${product.price.toLocaleString('vi-VN')} VNƒê</p>
      <button onclick="addToCart('${product._id}')">Th√™m v√†o gi·ªè</button>
      ${user && user.role === 'admin' ? `<button class="edit-btn" onclick="openEditProductModal('${product._id}')">S·ª≠a</button>` : ''}
    `;
    productContainer.appendChild(card);
  });
}

// H√†m m·ªü modal s·ª≠a s·∫£n ph·∫©m
function openEditProductModal(productId) {
  axios.get(`http://localhost:5000/api/products/${productId}`)
    .then(res => {
      const product = res.data;
      showEditProductModal(product);
    })
    .catch(err => {
      alert('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ s·ª≠a');
      console.error(err);
    });
}

// H√†m hi·ªÉn th·ªã modal s·ª≠a s·∫£n ph·∫©m
function showEditProductModal(product) {
  let modal = document.getElementById('editProductModal');
  if (!modal) {
    modal = document.createElement('div');
    modal.id = 'editProductModal';
    modal.innerHTML = `
      <div class="modal-content" style="background:#fff;padding:20px;max-width:400px;margin:40px auto;border-radius:8px;box-shadow:0 2px 8px #0002;position:relative;">
        <span id="closeEditModal" style="position:absolute;top:8px;right:12px;cursor:pointer;font-size:20px;">&times;</span>
        <h3>S·ª≠a s·∫£n ph·∫©m</h3>
        <form id="editProductForm">
          <input type="hidden" name="_id" value="${product._id}">
          <div><label>T√™n:</label><input type="text" name="name" value="${product.name || ''}" required></div>
          <div><label>Gi√°:</label><input type="number" name="price" value="${product.price || 0}" required></div>
          <div><label>·∫¢nh:</label><input type="text" name="image" value="${product.image || ''}"></div>
          <div><label>Danh m·ª•c:</label><input type="text" name="category" value="${product.category || ''}"></div>
          <div><label>M√¥ t·∫£:</label><textarea name="description">${product.description || ''}</textarea></div>
          <button type="submit">L∆∞u</button>
        </form>
      </div>
    `;
    document.body.appendChild(modal);
  } else {
    modal.querySelector('input[name="_id"]').value = product._id;
    modal.querySelector('input[name="name"]').value = product.name || '';
    modal.querySelector('input[name="price"]').value = product.price || 0;
    modal.querySelector('input[name="image"]').value = product.image || '';
    modal.querySelector('input[name="category"]').value = product.category || '';
    modal.querySelector('textarea[name="description"]').value = product.description || '';
    modal.style.display = 'block';
  }
  modal.style.display = 'block';
  document.getElementById('closeEditModal').onclick = function() {
    modal.style.display = 'none';
  };
  document.getElementById('editProductForm').onsubmit = function(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const data = {};
    formData.forEach((value, key) => { data[key] = value; });
    axios.put(`http://localhost:5000/api/products/${data._id}`, data)
      .then(() => {
        alert('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!');
        modal.style.display = 'none';
        fetchProducts();
      })
      .catch(err => {
        alert('L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m!');
        console.error(err);
      });
  };
}
